// Generated by CoffeeScript 1.3.3
(function() {
  var Bystander, EventEmitter, FSWatchr, async, colors, fs, minimatch, path, util, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  EventEmitter = require('events').EventEmitter;

  util = require('util');

  _ = require('underscore');

  minimatch = require('minimatch');

  colors = require('colors');

  FSWatchr = require('fswatchr');

  async = require('async');

  module.exports = Bystander = (function(_super) {

    __extends(Bystander, _super);

    function Bystander(root, opts) {
      var _base, _ref, _ref1, _ref2, _ref3, _ref4;
      this.root = root != null ? root : process.cwd();
      this.opts = opts != null ? opts : {};
      this.opts.root = path.resolve(this.root);
      this.root = this.opts.root;
      if ((_ref = (_base = this.opts).nolog) == null) {
        _base.nolog = false;
      }
      this.configFile = (_ref1 = (_ref2 = this.opts) != null ? _ref2.configFile : void 0) != null ? _ref1 : path.join(this.root, '.bystander');
      this.ignoreFiles = (_ref3 = this.opts.ignore) != null ? _ref3 : [];
      if (((_ref4 = this.opts) != null ? _ref4.ignorePatterns : void 0) != null) {
        this.setIgnoreFiles(this.opts.ignorePatterns);
      }
      if (!((this.opts.by != null) && typeof this.opts.by === 'object' && util.isArray(this.opts.by) === false)) {
        this.opts.by = {};
      }
      this.by = {};
      Bystander.__super__.constructor.call(this, this.root);
    }

    Bystander.prototype._readConfigFile = function(p, cb) {
      var _this = this;
      if (!(p != null) || typeof p === 'function') {
        cb = p;
        p = path.join(this.root, ".bystander");
      } else if (!(p != null)) {
        p = path.join(this.root, ".bystander");
      }
      p = path.resolve(p);
      return fs.readFile(p, 'utf8', function(err, body) {
        var config, patterns, _ref, _ref1;
        if (!err) {
          try {
            config = JSON.parse(body);
            patterns = config.ignore;
            if (patterns != null) {
              _this.setIgnoreFiles(patterns);
            }
            if (((_ref = _this.opts.plugins) != null ? _ref.length : void 0) === 0 && ((_ref1 = config.plugins) != null ? _ref1.length : void 0) !== 0) {
              _this.opts.plugins = config.plugins;
            }
            if ((config.by != null) && typeof config.by === 'object' && util.isArray(config.by) === false) {
              _this.opts.by = _.extend(config.by, _this.opts.by);
            }
            _this.opts = _.extend(config, _this.opts);
          } catch (e) {
            console.log(("ERROR! - coudn't parse config file " + p).red + '\n');
          }
        }
        return cb(_this.ignoreFiles);
      });
    };

    Bystander.prototype._requirePlugins = function() {
      var i, options, pname, r, v, _i, _len, _ref, _ref1, _ref2, _results;
      if (this.opts.plugins != null) {
        _ref = this.opts.plugins;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          v = _ref[i];
          try {
            r = require(v);
            pname = path.basename(v).replace(/^by-/i, '');
            options = (_ref1 = (_ref2 = this.opts.by) != null ? _ref2[pname] : void 0) != null ? _ref1 : {};
            options.nolog = this.opts.nolog;
            options.root = this.opts.root;
            _results.push(this.by[pname] = new r(options));
          } catch (e) {
            console.log(("ERROR! - " + v + " plugin not found!").red + '\n');
            _results.push(this.emit('plugin error', v, "" + v + " plugin not found!"));
          }
        }
        return _results;
      }
    };

    Bystander.prototype._init = function(cb) {
      var _this = this;
      return async.forEach(_(this.by).toArray(), function(v, callback) {
        if (v._init != null) {
          return v._init.call(v, function() {
            return callback();
          });
        } else {
          return callback();
        }
      }, function() {
        return cb();
      });
    };

    Bystander.prototype._setListeners = function(cb) {
      var k, v, _ref, _results;
      _ref = this.by;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        if (v._setListeners != null) {
          _results.push(v._setListeners.call(v, this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Bystander.prototype._isIgnore = function(file) {
      var v, _i, _len, _ref;
      _ref = this.ignoreFiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (minimatch(file, v, {
          dot: true
        })) {
          return true;
        }
      }
      return false;
    };

    Bystander.prototype.setIgnoreFiles = function(newFiles) {
      return this.ignoreFiles = _(this.ignoreFiles).union(newFiles);
    };

    Bystander.prototype.unsetIgnoreFiles = function(patterns) {
      if (patterns != null) {
        this.ignoreFiles = _(this.ignoreFiles).reject(function(v) {
          return patterns.indexOf(v) !== -1;
        });
      }
      return this.ignoreFiles;
    };

    Bystander.prototype.run = function(nowatch) {
      var _this = this;
      return this._readConfigFile(this.configFile, function() {
        _this._requirePlugins();
        return _this._init(function() {
          _this._setListeners();
          _this.setFilter(function(dir, path) {
            return _this._isIgnore(dir);
          });
          if (!nowatch) {
            return _this.watch();
          }
        });
      });
    };

    return Bystander;

  })(FSWatchr);

}).call(this);
